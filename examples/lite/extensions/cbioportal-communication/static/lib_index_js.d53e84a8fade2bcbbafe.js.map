{"version":3,"file":"lib_index_js.d53e84a8fade2bcbbafe.js","mappings":";;;;;;;;;;;;;;;AAEqD;AAErD;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,yCAAyC;IAC7C,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,+DAAa,CAAC;IACzB,QAAQ,EAAE,CAAC,GAAoB,EAAE,YAA2B,EAAE,EAAE;QAC9D,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;QAEnF,kCAAkC;QAClC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE;YAC3C,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,qBAAqB,EAAE;gBAC7C,OAAO,CAAC,GAAG,CAAC,iCAAiC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBAE3D,IAAI,YAAY,CAAC,KAAK,KAAK,iBAAiB,EAAE;oBAC5C,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;iBAC3C;qBAAM;oBACL,YAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;iBAC1C;aACF;QACH,CAAC,CAAC,CAAC;QAEH,kCAAkC;QAClC,MAAM,kBAAkB,GAAG,GAAS,EAAE;YACpC,MAAM,OAAO,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,EAAE,CAAC;YAC3E,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC;QACF,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IACxD,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://cbioportal-communication/./src/index.ts"],"sourcesContent":["import { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\n\nimport { IThemeManager } from '@jupyterlab/apputils';\n\n/**\n * Initialization data for the jupyterlab-iframe-bridge-example extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-iframe-bridge-example:plugin',\n  autoStart: true,\n  requires: [IThemeManager],\n  activate: (app: JupyterFrontEnd, themeManager: IThemeManager) => {\n    console.log('JupyterLab extension jupyterlab-iframe-bridge-example is activated!');\n\n    /* Incoming messages management */\n    window.addEventListener('message', (event) => {\n      if (event.data.type === 'from-host-to-iframe') {\n        console.log('Message received in the iframe:', event.data);\n\n        if (themeManager.theme === 'JupyterLab Dark') {\n          themeManager.setTheme('JupyterLab Light');\n        } else {\n          themeManager.setTheme('JupyterLab Dark');\n        }\n      }\n    });\n\n    /* Outgoing messages management */\n    const notifyThemeChanged = (): void => {\n      const message = { type: 'from-iframe-to-host', theme: themeManager.theme };\n      window.parent.postMessage(message, '*');\n      console.log('Message sent to the host:', message);\n    };\n    themeManager.themeChanged.connect(notifyThemeChanged);\n  },\n};\n\nexport default plugin;"],"names":[],"sourceRoot":""}